// Allow selecting OrientDB and Groovy from the commandline
def javaVersion = System.getProperty( 'java.version' )
def groovyVersion = project.hasProperty("GV") ? GV : '1.8.9'
def orientVersion = project.hasProperty('OV') ? OV : '2.0.7'

apply plugin: 'groovy'
apply plugin: 'application'
apply plugin: 'jacoco'
apply plugin: 'eclipse'

mainClassName = 'com.akonizo.orientdb.GraphPerformance'

repositories { mavenCentral() }

dependencies {
    compile "org.codehaus.groovy:groovy-all:${groovyVersion}"
    compile ( "com.orientechnologies:orientdb-graphdb:${orientVersion}" ) { exclude module:'commons-logging' }
    compile 'org.apache.commons:commons-math3:3.5'
    compile 'org.slf4j:slf4j-api:1.7.12'
    compile 'org.slf4j:slf4j-ext:1.7.12'
    compile files("${rootDir}/lib/sigar/sigar.jar")

    runtime 'org.slf4j:jcl-over-slf4j:1.7.12'
    runtime 'org.slf4j:log4j-over-slf4j:1.7.12'
    runtime 'ch.qos.logback:logback-classic:1.1.3'
    runtime fileTree(dir: "${rootDir}/lib/sigar", exclude: "*.jar")

    testCompile 'junit:junit:4.11'
    testCompile "org.hamcrest:hamcrest-core:1.3"
}

// Ensure everything's using the same version of Groovy
configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.codehaus.groovy') {
            details.useVersion groovyVersion.split(':')[0]
        }
    }
}

// Use InvokeDynamic with Groovy, if available
tasks.withType(GroovyCompile) {
    if (groovyVersion.endsWith( ':indy') && javaVersion >= '1.8.0') {
        println "Enabling InvokeDynamic, Java ${javaVersion}, Groovy ${groovyVersion}, OrientDB ${orientVersion}"
        groovyOptions.optimizationOptions.indy = true
    } else {
        println "Skipping InvokeDynamic, Java ${javaVersion}, Groovy ${groovyVersion}, OrientDB ${orientVersion}"
    }
}

run {
    if ( project.hasProperty( 'MODEL' ) ) {
        args( MODEL )
    }
}